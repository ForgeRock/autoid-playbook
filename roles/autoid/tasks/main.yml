---
- name: create autoid user and installation dir/key
  import_tasks: user.yml

- name: install docker
  import_tasks: ins_doc.yml

- name: get redhat
  become_user: "{{ autoid_user }}"
  shell: "cat /etc/redhat-release | awk '{print $1}'"
  register: red_output

- set_fact:
    myred: "{{ red_output.stdout }}"

- debug: var=myred

- name: Install community modules
  become: yes
  shell: |
    ansible-galaxy collection install community.mongodb
    ansible-galaxy collection install community.crypto
  when: myred =='Rocky'

- name: get myOS
  become_user: "{{ autoid_user }}"
  shell: "cat /etc/redhat-release | awk '{print $4}'"
  register: os_output

- set_fact:
    myos: "{{ os_output.stdout }}"

- debug: var=myos

- name: install elinks
  become: yes
  shell:
    yum install --enablerepo=powertools elinks -y
  when: myos == '8.7'

- name: check home dir
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}"
  register: check_home

- name: Create third party home dir 
  shell: |
    mkdir -p "{{ home_dir }}"
    chown "{{ autoid_user }}":"{{ autoid_group }}" "{{ home_dir }}"
  become: yes
  when: not check_home.stat.exists

- name: copy key file
  become_user: "{{ autoid_user }}"
  copy:
    src: autoid_registry_key.json
    dest: "{{ install_dir }}"
    mode: '0755'

- name: copy mongo_user.sh files
  become_user: "{{ autoid_user }}"
  copy:
    src: mongo_user.sh
    dest: "{{ install_dir }}"
    mode: '0755'

- name: Update mongo_user with password
  become: yes
  replace:
    path: '{{ install_dir }}/mongo_user.sh'
    regexp: "{{ item }}"
    replace: "{{ passwd }}"
  with_items:
  - 'password'

- name: copy run files
  become_user: "{{ autoid_user }}"
  copy:
    src: run_deployer.sh
    dest: "{{ install_dir }}"
    mode: '0755'

- name: copy download files
  become_user: "{{ autoid_user }}"
  copy:
    src: download.sh
    dest: "{{ install_dir }}"
    mode: '0755'

- name: copy readme file
  become_user: "{{ autoid_user }}"
  copy:
    src: README
    dest: "{{ home_dir }}"
    mode: '0755'

- name: copy requirment files
  become_user: "{{ autoid_user }}"
  copy:
    src: requirements.txt
    dest: "{{ home_dir }}"
    mode: '0755'

- name: copy requirment_new files
  become_user: "{{ autoid_user }}"
  copy:
    src: requirements_new.txt
    dest: "{{ home_dir }}"
    mode: '0755'

- name: copy wrapper files
  become_user: "{{ autoid_user }}"
  copy:
    src: wrapper.sh
    dest: "{{ install_dir }}"
    mode: '0755'
    
- name: get autoid key
  import_tasks: temp.yml

- name: run download script
  become_user: "{{ autoid_user }}"
  shell: "{{ install_dir }}/download.sh -v {{ AutoID_version }} "

- name: get myip
  become_user: "{{ autoid_user }}"
  shell: "echo $(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)"
  register: command_output

- set_fact:
    myip: "{{ command_output.stdout }}"

- debug: var=myip

- name: Update Hosts
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/hosts'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'
  - '#ip-1#'

- name: mongodb bug fix
  become_user: "{{ autoid_user }}"
  shell: |
    sed -i "/cassandra/,+1d" {{ install_dir }}/hosts;
  when: db_type == 'mongo'
      
- name: Update vars.yml of private ip map
  become_user: "{{ autoid_user }}"
  ansible.builtin.lineinfile:
    path: '{{ install_dir }}/vars.yml'
    insertafter: '^#private_ip'
    line: '  {{ myip }}: "{{ myip }}"'


- name: Update vars.yml of elastic host
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/vars.yml'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#elastic_host#'

- name: Update vars.yml of kibanan host
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/vars.yml'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#kibana_host#'


- name: update cassandra contact point
  become_user: "{{ autoid_user }}"
  lineinfile:
    path: '{{ install_dir }}/vars.yml'
    regexp: "contact_points: *"
    line: "  contact_points: {{ myip }}"


- name: update zoran user
  become_user: "{{ autoid_user }}"
  lineinfile:
    path: '{{ install_dir }}/vars.yml'
    regexp: "username: *"
    line: "  username: zoran_dba"

- name: Update vault.yml
  import_tasks: vault_update.yml

- name: Update run_deployer.sh with apps dir
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/run_deployer.sh'
    regexp: "{{ item }}"
    replace: "{{ home_dir }}"
  with_items:
  - '#home'


- name: Update run_deployer.sh with apps dir
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/run_deployer.sh'
    regexp: "{{ item }}"
    replace: "{{ home_dir }}"
  with_items:
  - '#cass'
  when: db_type == 'cassandra'

- name: update database type
  become_user: "{{ autoid_user }}"
  lineinfile:
    path: '{{ install_dir }}/vars.yml'
    regexp: "db_driver_type: cassandra"
    line: "db_driver_type: {{ db_type }}" 
       
- name: Update cassandra contact points
  become_user: "{{ autoid_user }}"
  shell: "{{ item }}"
  with_items:
    - "sed -i 's/icontact_points:*/contact_points:: {{ myip }}/g' {{ install_dir }}/vars.yml"

- name: edit ansible.cfg
  lineinfile:
    path: "{{ install_dir }}/ansible.cfg"
    line: 'callback_whitelist = profile_tasks'
    state: present
  become: yes

- name: Update ansible.cfg with right username
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ install_dir }}/ansible.cfg'
    regexp: "{{ item }}"
    replace: "{{ autoid_user }}"
  with_items:
  - 'autoid'

- name: check docker downloads
  become: yes
  ansible.builtin.stat:
    path: "{{ install_dir }}/autoid-packages"
  register: check_docker

- name: download docker images
  become_user: "{{ autoid_user }}"
  shell: docker run -i -u root -v "{{ install_dir }}":/config -v /var/run/docker.sock:/var/run/docker.sock gcr.io/forgerock-autoid/deployer:{{ AutoID_version }} bash download-images
  args:
    chdir: "{{ install_dir }}"
  when: not check_docker.stat.exists

- name: chown of install dir
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ install_dir }}"
  become: yes
  when: not check_docker.stat.exists

- name: install third party dependencies
  import_tasks: other.yml
 
- name: copy livy conf files
  become_user: "{{ autoid_user }}"
  copy:
    src: livy.conf
    dest: "{{ home_dir }}/livy/conf"
    mode: '0755'

- name: Update livy.conf
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/livy/conf/livy.conf'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'

- name: copy spark conf files
  become_user: "{{ autoid_user }}"
  copy:
    src: spark-defaults.conf
    dest: "{{ home_dir }}/spark/conf"
    mode: '0755'

- name: Update spark.conf
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/spark/conf/spark-defaults.conf'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'

- name: chown of readme
  shell:
    chown "{{ autoid_user }}":"{{ autoid_group }}" "{{ home_dir }}"/README
  become: yes

- name: Update readme with myip
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/README'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'


- name: Update readme with password
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/README'
    regexp: "{{ item }}"
    replace: "{{ passwd }}"
  with_items:
  - '#pass#'

- name: copy opensearch conf files
  become_user: "{{ autoid_user }}"
  copy:
    src: opensearch.yml
    dest: "{{ home_dir }}/opensearch/config"
    mode: '0755'

- name: copy dashboards conf files
  become_user: "{{ autoid_user }}"
  copy:
    src: opensearch_dashboards.yml
    dest: "{{ home_dir }}/opensearch-dashboards/config"
    mode: '0755'


- name: Update opensearch.yml
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/opensearch/config/opensearch.yml'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'

- name: Update opensearch.yml home dir
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/opensearch/config/opensearch.yml'
    regexp: "{{ item }}"
    replace: "{{ home_dir }}"
  with_items:
  - '#home#'

- name: Update dashboards.yml with ip
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/opensearch-dashboards/config/opensearch_dashboards.yml'
    regexp: "{{ item }}"
    replace: "{{ myip }}"
  with_items:
  - '#ip#'

- name: Update dashboards.yml with password
  become_user: "{{ autoid_user }}"
  replace:
    path: '{{ home_dir }}/opensearch-dashboards/config/opensearch_dashboards.yml'
    regexp: "{{ item }}"
    replace: "{{ passwd }}"
  with_items:
  - '#pass#'

- name: Setup mongo users
  import_tasks: mongo_setup.yml
  when: db_type == 'mongo'

- name: check certs install for cassandra
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/cassandra/certs/root-ca.pem"
  register: check_cass_cert

- name: cassandra old cert files remove
  become: yes
  shell: rm "{{ home_dir }}"/cassandra/certs/*.*
  when: check_cass_cert.stat.exists

- name: Install certs for cassandra
  import_tasks: cass_certs.yml

- name: Setup cassandra
  import_tasks: cassandra_config.yml
  when: db_type == 'cassandra'

- name: check certs install for opensearch
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/opensearch/certs/root-ca.pem"
  register: check_open_cert

- name: opensearch old cert files remove
  become: yes
  shell: rm "{{ home_dir }}"/opensearch/certs/*.*
  when: check_open_cert.stat.exists

- name: Install certs for opensearch
  import_tasks: open_certs.yml

- name: edit security limits.conf
  become: yes
  shell:
    echo "{{ autoid_user }}       - nofile 65535" | sudo tee -a /etc/security/limits.conf
   
- name: edit max_map
  become: yes
  shell:
    sudo sysctl -w vm.max_map_count=262144

- name: system reload
  become: yes
  shell:
    systemctl daemon-reload

- name: chomd securityadmin.sh
  become: yes
  shell:
    sudo chmod +x "{{ home_dir }}"/opensearch/plugins/opensearch-security/tools/securityadmin.sh

- name: create autoid_group
  become: yes
  shell:
    groupadd -f autoid_group

- name: add autoid to autoid_group
  become: yes
  shell:
    usermod -a -G autoid_group "{{ autoid_user }}"

- name: Create certs dir for install
  shell: |
    mkdir -p "{{ install_dir }}"/certs/mongo
    mkdir -p "{{ install_dir }}"/certs/cassandra
    mkdir -p "{{ install_dir }}"/certs/elastic
    mkdir -p /opt/autoid/license
    touch /opt/autoid/license/open-source-attributions.pdf
    chown -Rf "{{ autoid_user }}":autoid_group /opt/autoid/license
    chmod -Rf 777 /opt/autoid/*
  become: yes

- name: copy elastic certs
  shell: |
    cp "{{ home_dir }}"/opensearch/certs/root-ca.pem "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/esnodekey.crt_signed "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/esnode.pem "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/esnode-key.pem "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/elastic-client-keystore.jks "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/elastic-server-truststore.jks "{{ install_dir }}"/certs/elastic/
    cp "{{ home_dir }}"/opensearch/certs/*.* "{{ home_dir }}"/opensearch/config

- name: copy mongo certs
  shell: |
    cp "{{ home_dir }}"/mongo/certs/ca.pem "{{ install_dir }}"/certs/mongo/rootCA.pem
    cp "{{ home_dir }}"/mongo/certs/mongodb.pem "{{ install_dir }}"/certs/mongo/
    cp "{{ home_dir }}"/mongo/certs/mongo-client-keystore.jks "{{ install_dir }}"/certs/mongo/
    cp "{{ home_dir }}"/mongo/certs/mongo-server-truststore.jks "{{ install_dir }}"/certs/mongo/
  when: db_type == 'mongo'


- name: copy cassandra certs
  shell: |
    cp "{{ home_dir }}"/cassandra/certs/zoran-cassandra* "{{ install_dir }}"/certs/cassandra/
  when: db_type == 'cassandra'

- name: chown of install dir certs
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ install_dir }}"/certs
  become: yes

- name: chown of install dir certs
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/opensearch/config
  become: yes

- name: chown of /opt/autoid
  shell:
          #sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  /opt/autoid
    sudo chmod -Rf 777 /opt/autoid/license
  become: yes

- name: start all services
  import_tasks: start.yml
