---

- name: Create install directory
  file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ autoid_user }}"
    group: "{{ autoid_user }}"
    mode: 0775
    recurse: yes
  become: yes

- name: Install development tools 
  yum:
    name: "@Development Tools"
    state: latest
  become: yes

- name: Install yum utils
  yum:
    name: yum-utils
    state: latest
  become: yes

- name: IPv4 Forwarding
  lineinfile:
    path: /etc/sysctl.conf
    line: 'net.ipv4.ip_forward=1'
    state: present
  become: yes

- name: update security limits
  become: yes
  shell:
    echo "{{ autoid_user }}       - nofile 65535" | sudo tee -a /etc/security/limits.conf

- name: get redhat
  become_user: "{{ autoid_user }}"
  shell: "cat /etc/redhat-release | awk '{print $1}'"
  register: red_output
  
- set_fact:
    myred: "{{ red_output.stdout }}"

- debug: var=myred

- name: Install epel-release 
  yum:
    name: epel-release
    state: latest
  become: yes
  when: myred == 'Rocky'

- name: Install update
  yum:
    name: '*'
    state: latest
    update_cache: yes
    update_only: yes
  register: yum_update_status
  become: yes

- name: Install wget
  yum:
    name: wget
    state: latest
  become: yes

- name: Install unzip
  yum:
    name: unzip
    state: latest
  become: yes

- name: Install java-11-openjdk-devel
  yum:
    name: java-11-openjdk-devel
    state: latest
  become: yes


- name: update bashrc with java home
  lineinfile:
    path: "{{ usr_dir }}/.bashrc"
    line: 'export JAVA_HOME=/etc/alternatives/jre_11_openjdk'
    state: present
  become: yes

- name: update bashrc with java path
  lineinfile:
    path: "{{ usr_dir }}/.bashrc"
    line: 'export PATH=$JAVA_HOME/bin:$PATH'
    state: present
  become: yes

- name: source env
  become_user: "{{ autoid_user }}"
  shell:
    source "{{ usr_dir }}"/.bashrc


- name: Install openssl-devel
  yum:
    name: openssl-devel
    state: latest
  become: yes

- name: Install bzip2-devel
  yum:
    name: bzip2-devel
    state: latest
  become: yes

- name: Install libffi-devvel
  yum:
    name: libffi-devel
    state: latest
  become: yes

- name: Install Python
  include: python38.yml
  when: AutoID_version == '2022.11.1' or AutoID_version == '2022.11.2' or AutoID_version == '2022.11.3' or AutoID_version == '2022.11.4'
  
- name: Install Python
  include: python310.yml
  when: AutoID_version == '2022.11.5' or AutoID_version == '2022.11.6' AutoID_version == '2022.11.7' or AutoID_version == '2022.11.8' AutoID_version == '2022.11.9' or AutoID_version == '2022.11.10'


- name: Install python setuptools
  become_user: "{{ autoid_user }}"
  shell:
    python3 -m pip install --upgrade pip setuptools wheel

- name: Install python requirements
  become_user: "{{ autoid_user }}"
  shell:
    sudo python3 -m pip install -r requirements.txt
  args:
    chdir: "{{ home_dir }}"
  when: AutoID_version == '2022.11.1' or AutoID_version == '2022.11.2' or AutoID_version == '2022.11.3' or AutoID_version == '2022.11.4' 

  
- name: Install python requirements
  become_user: "{{ autoid_user }}"
  shell:
    sudo python3 -m pip install -r requirements_new.txt
  args:
    chdir: "{{ home_dir }}"
  when: AutoID_version == '2022.11.5' or AutoID_version == '2022.11.6' AutoID_version == '2022.11.7' or AutoID_version == '2022.11.8' AutoID_version == '2022.11.9' or AutoID_version == '2022.11.10'

- name: check spark download
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/{{ spark }}.tgz"
  register: check_spark

- name: Download spark
  become_user: "{{ autoid_user }}"
  get_url:
    url: "https://archive.apache.org/dist/spark/{{ spark_dir }}/{{ spark }}.tgz"
    dest: '{{ home_dir }}'
  when: not check_spark.stat.exists

- name: Extrat spark
  become: yes
  ansible.builtin.unarchive:
    src: "{{ home_dir }}/{{ spark }}.tgz"
    dest: "{{ home_dir }}"
    remote_src: yes

- name: check spark folder
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/spark"
  register: check_spark_folder

- name: setup spark
  shell:
    mv "{{ home_dir + '/' + spark }}" "{{ home_dir }}"/spark
  when: not check_spark_folder.stat.exists
  become: yes

- name: remove download of spark
  shell: |
    rm "{{ home_dir }}"/spark*.tgz
    rm -rf "{{ home_dir + '/' + spark }}"
  when: check_spark.stat.exists
  become: yes

- name: setup spark log4j
  shell:
    cp "{{ home_dir }}"/spark/conf/log4j2.properties.template "{{ home_dir }}"/spark/conf/log4j2.properties
  when: check_spark_folder.stat.exists
  become: yes

- name: chown of spark
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/spark
  become: yes


- name: copy livy files
  ansible.builtin.copy:
    src: "{{ install_dir }}/autoid-packages/apache-livy-0.8.0-incubating-SNAPSHOT-bin.zip"
    dest: "{{ home_dir }}/apache-livy-0.8.0-incubating-SNAPSHOT-bin.zip"
    owner: "{{ autoid_user }}"
    group: "{{ autoid_group }}"
    remote_src: yes
  become: yes

- name: Extrat livy
  become: yes
  shell:
    unzip -o "{{ home_dir }}"/apache-livy-0.8.0-incubating-SNAPSHOT-bin.zip -d "{{ home_dir }}"

- name: check livy folder
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/livy"
  register: check_file

- name: setup livy
  shell:
    mv "{{ home_dir }}"/apache-livy-0.8.0-incubating-SNAPSHOT-bin "{{ home_dir }}"/livy
  when: not check_file.stat.exists
  become: yes

- name: chown of livy
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/livy
  become: yes

- name: remove download of livy
  shell: |
    rm "{{ home_dir }}"/apache-livy-0.8.0-incubating-SNAPSHOT-bin.zip
    rm -rf "{{ home_dir }}"/apache-livy-0.8.0-incubating-SNAPSHOT-bin
  when: check_file.stat.exists
  become: yes

- name: Mongo Install
  include: mongo_download.yml
  when: db_type == 'mongo'


- name: Cassandra Install
  include: cassandra_download.yml
  when: db_type == 'cassandra'

- name: Download opensearch
  become_user: "{{ autoid_user }}"
  get_url:
    url: https://artifacts.opensearch.org/releases/bundle/opensearch/1.3.6/opensearch-1.3.6-linux-x64.tar.gz
    dest: '{{ home_dir }}'

- name: Extrat openserch
  become: yes
  shell:
    tar -xf "{{ home_dir }}"/opensearch-1.3.6-linux-x64.tar.gz -C "{{ home_dir }}"

- name: check opensearch folder
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/opensearch"
  register: check_file

- name: setup opensearch
  shell:
    mv "{{ home_dir }}"/opensearch-1.3.6 "{{ home_dir }}"/opensearch
  when: not check_file.stat.exists
  become: yes

- name: create opensearch cert dir
  become: yes
  shell:
    mkdir -p "{{ home_dir }}"/opensearch/certs

- name: chown of opensearch
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/opensearch
  become: yes

- name: create cassandra cert dir
  become: yes
  shell:
    mkdir -p "{{ home_dir }}"/cassandra/certs

- name: chown of cassandra
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/cassandra
  become: yes

- name: chmod hash.sh
  become: yes
  shell:
    sudo chmod +x plugins/opensearch-security/tools/hash.sh
  args:
    chdir: "{{ home_dir }}/opensearch"

- name: get password hash value
  become_user: "{{ autoid_user }}"
  environment:
          JAVA_HOME: /etc/alternatives/jre_11_openjdk
  shell: |
    ./plugins/opensearch-security/tools/hash.sh -p "{{ passwd }}" > "{{ home_dir }}"/pwd_hash
    chown "{{ autoid_user }}":"{{ autoid_group }}" "{{ home_dir }}"/pwd_hash
  args:
    chdir: "{{ home_dir }}/opensearch"

- name: get pwd_hash
  become: yes
  shell: cat "{{ home_dir }}"/pwd_hash
  register: hash_output

- set_fact:
    myhash: "{{ hash_output.stdout }}"

    #- debug: var=myhash

- name: copy internal user file
  become_user: "{{ autoid_user }}"
  copy:
    src: internal_users.yml
    dest: "{{ home_dir }}/opensearch/plugins/opensearch-security/securityconfig/"
    mode: '0755'
    owner: "{{ autoid_user }}"
    group: "{{ autoid_group }}"

- name: Update hash for internal user
  become_user: "{{ autoid_user }}"
  replace:
    path: "{{ home_dir }}/opensearch/plugins/opensearch-security/securityconfig/internal_users.yml"
    regexp: "{{ item }}"
    replace: "{{ myhash }}"
  with_items:
  - '#hash#'


- name: remove download of opensearch
  shell: |
    rm "{{ home_dir }}"/opensearch-1.3.6-linux-x64.tar.gz
    rm -rf "{{ home_dir }}"/opensearch-1.3.6
  when: check_file.stat.exists
  become: yes
  
- name: Download opensearch_dashboard
  become_user: "{{ autoid_user }}"
  get_url:
    url: https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/1.3.6/opensearch-dashboards-1.3.6-linux-x64.tar.gz
    dest: '{{ home_dir }}'

- name: Extrat openserch dashboard
  become: yes
  shell:
    tar -xf "{{ home_dir }}"/opensearch-dashboards-1.3.6-linux-x64.tar.gz -C "{{ home_dir }}"

- name: check dashboard folder
  become: yes
  ansible.builtin.stat:
    path: "{{ home_dir }}/opensearch-dashboards"
  register: check_file

- name: setup open dashboard
  shell:
    mv "{{ home_dir }}"/opensearch-dashboards-1.3.6 "{{ home_dir }}"/opensearch-dashboards/
  when: not check_file.stat.exists
  become: yes

- name: chown of dashboard
  shell:
    sudo chown -Rf "{{ autoid_user }}":"{{ autoid_group }}"  "{{ home_dir }}"/opensearch-dashboards
  become: yes

- name: remove download of opensearch dashboard
  shell: |
    rm "{{ home_dir }}"/opensearch-dashboards-*.gz
    rm -rf "{{ home_dir }}"/opensearch-dashboards-1.3.6
  when: check_file.stat.exists
  become: yes
  
- name: update all env
  include: bash.yml

